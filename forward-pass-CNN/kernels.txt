########## LAYER ONE KERNELS #############

bottom_sobel =    [[-1,-2,-1],
                   [0, 0, 0],
                   [1, 2, 1]]
               
top_sobel =     [[1, 2, 1],
                 [0, 0, 0],
                 [-1,-2,-1]]

sharpening = [[0,-1,0],
              [-1,5,-1],
              [0,-1,0]]

weighted_averaging_3x3 = (1/16)*[[1, 2, 1],
                                [2, 4, 2],
                                [1, 2, 1]]        


############## LAYER TWO KERNELS ###########

robert_x = [[1, 0],
            [0, -1]]    

robert_y = [[0, +1],
            [-1, 0]] 

averaging_2x2 = (1/4)*[[1, 1],
                       [1, 1]]

############# LAYER THREE KERNELS ##############
gaussian_5x5 = (1/273)*[[1,4,7,4,1],
                        [4,16,26,16,4],
                        [7,26,41,26,7],
                        [4,16,26,16,4],
                        [1,4,7,4,1]]


averaging_5x5 = (1/25)*ones((5, 5));

############### CNN FEED FORWARD ####################

###### cat function in MATLAB and np.concatenate or dstack (python) could be used in order to build tensors of kernels

l1_filters = ... ### concatenating horizontal_edge, vertical_edge, sharpening, ...  along the 3rd axis
l2_filters = ... ### concatenating robert_x, robert_y, averaging_2x2 along the 3rd axis
l3_filters = ... ### concatenating gaussian_5x5, averaging_5x5 along the 3rd axis


layer_one_output = Conv2D(img, l1_filters, stride=1, padding='same')
layer_two_output = Conv2D(layer_one_output, l2_filters, stride=2, padding='valid')
layer_three_output = Conv2D(layer_two_output, l3_filters, stride=1, padding='same')
pooling_output = MaxPooling2D(layer_three_output, window=(2, 2), stride=2)


#### plot images in each feature map (layer_one_output, layer_two_output) using subplot
#### for example: if there are 4 images in the feature map (as many as kernels applied) 
#### there should be 5 images in the subplot (original + each image)



